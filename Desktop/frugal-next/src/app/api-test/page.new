'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

// API endpoints and descriptions
const API_ENDPOINTS = [
  {
    id: 'auth',
    name: 'Authentication',
    endpoint: 'https://medimpact.okta.com/oauth2/aus107c5yrHDu55K8297/v1/token',
    method: 'POST',
    description: 'Retrieves an authentication token for making API requests.',
    requestBody: {
      grant_type: 'client_credentials',
      client_id: process.env.NEXT_PUBLIC_AMERICAS_PHARMACY_CLIENT_ID || '0oatgei47wp1CfkaQ297',
      client_secret: '********', // Masked for security
      scope: 'ccds.read'
    }
  },
  {
    id: 'drugInfo',
    name: 'Get Drug Information by GSN',
    endpoint: '/v1/druginfo/{gsn}',
    method: 'GET',
    description: 'Retrieves detailed information about a drug using its Generic Sequence Number (GSN).',
    params: ['gsn']
  },
  {
    id: 'findDrug',
    name: 'Find Drug by Name Prefix',
    endpoint: '/v1/drugs/{prefixText}',
    method: 'GET',
    description: 'Retrieves a list of drug names that match a given prefix.',
    params: ['prefixText'],
    queryParams: {
      count: '10',
      hqAlias: 'walkerrx'
    }
  },
  {
    id: 'findDrugPost',
    name: 'Find Drug by Name (POST)',
    endpoint: '/v1/drugs/names',
    method: 'POST',
    description: 'Retrieves a list of drug names that match a given prefix using POST method.',
    requestBody: {
      hqMappingName: 'walkerrx',
      prefixText: 'LIP',
      count: 10
    }
  },
  {
    id: 'pricingByGsn',
    name: 'Get Drug Pricing by GSN',
    endpoint: '/v1/drugprices/byGSN',
    method: 'POST',
    description: 'Retrieves drug pricing based on the Generic Sequence Number (GSN).',
    requestBody: {
      hqMappingName: 'walkerrx',
      gsn: 62733,
      latitude: 30.4014,
      longitude: -97.7525,
      customizedQuantity: true,
      quantity: 30
    }
  },
  {
    id: 'pricingByName',
    name: 'Get Drug Pricing by Name',
    endpoint: '/v1/drugprices/byName',
    method: 'POST',
    description: 'Retrieves drug pricing based on the drug name.',
    requestBody: {
      hqMappingName: 'walkerrx',
      drugName: 'lipitor',
      latitude: 30.4015,
      longitude: -97.7527
    }
  },
  {
    id: 'pricingByNdc',
    name: 'Get Drug Pricing by NDC Code',
    endpoint: '/v1/drugprices/byNdcCode',
    method: 'POST',
    description: 'Retrieves drug pricing using the National Drug Code (NDC).',
    requestBody: {
      hqMappingName: 'walkerrx',
      ndcCode: 70954014010,
      latitude: 30.4015,
      longitude: -97.7527,
      customizedQuantity: true,
      quantity: 30
    }
  },
  {
    id: 'groupPricing',
    name: 'Get Group Pharmacy Drug Pricing',
    endpoint: '/v1/groupdrugprices',
    method: 'POST',
    description: 'Retrieves pricing data grouped by pharmacy chains.',
    requestBody: {
      hqMappingName: 'walkerrx',
      gsn: 62733,
      latitude: 30.4014,
      longitude: -97.7525
    }
  },
  {
    id: 'multiDrugGsn',
    name: 'Get Multi-Drug Pricing by GSN',
    endpoint: '/v1/multidrugprices/byGSN',
    method: 'POST',
    description: 'Retrieves multi-drug pricing using GSN in a single request.',
    requestBody: {
      hqMappingName: 'walkerrx',
      latitude: 30.4014,
      longitude: -97.7525,
      drugList: [
        { gsn: 62733, quantity: 30, brandGenericFlag: 'G', customizedQuantity: true },
        { gsn: 62734, quantity: 30, brandGenericFlag: 'G', customizedQuantity: true }
      ]
    }
  },
  {
    id: 'multiDrugName',
    name: 'Get Multi-Drug Pricing by Name',
    endpoint: '/v1/multidrugprices/byName',
    method: 'POST',
    description: 'Retrieves multi-drug pricing using drug names in a single request.',
    requestBody: {
      hqMappingName: 'walkerrx',
      latitude: 30.4014,
      longitude: -97.7525,
      drugList: [
        { drugName: 'lipitor', brandGenericFlag: 'G', customizedQuantity: true, quantity: 30 },
        { drugName: 'advil', brandGenericFlag: 'G', customizedQuantity: true, quantity: 30 }
      ]
    }
  },
  {
    id: 'multiDrugNdc',
    name: 'Get Multi-Drug Pricing by NDC Code',
    endpoint: '/v1/multidrugprices/byNdcCode',
    method: 'POST',
    description: 'Retrieves multi-drug pricing using NDCs in a single request.',
    requestBody: {
      hqMappingName: 'walkerrx',
      latitude: 30.4014,
      longitude: -97.7525,
      drugList: [
        { ndcCode: 70954014010, quantity: 30, customizedQuantity: true },
        { ndcCode: 70954014020, quantity: 30, customizedQuantity: true }
      ]
    }
  },
  {
    id: 'multigroupdrugprices',
    name: 'Get Group Multi-Drug Pricing',
    endpoint: '/v1/multigroupdrugprices',
    method: 'POST',
    description: 'Retrieves multi-drug pricing grouped by pharmacy chains.',
    requestBody: {
      hqMappingName: 'walkerrx',
      latitude: 30.4014,
      longitude: -97.7525,
      drugList: [
        { gsn: 62733, quantity: 30, brandGenericFlag: 'G', customizedQuantity: true },
        { gsn: 62734, quantity: 30, brandGenericFlag: 'G', customizedQuantity: true }
      ]
    }
  },
  {
    id: 'pharmacies',
    name: 'Get Nearby Pharmacies',
    endpoint: '/v1/pharmacies',
    method: 'GET',
    description: 'Retrieves a list of pharmacies based on a given latitude and longitude.',
    queryParams: {
      lat: 30.4015,
      long: -97.7525,
      hqMappingName: 'walkerrx',
      pharmacyCount: 5
    }
  },
  {
    id: 'groupPharmacies',
    name: 'Get Group Pharmacies',
    endpoint: '/v1/pharmacies/group',
    method: 'GET',
    description: 'Retrieves a list of pharmacies grouped by chain based on a given latitude and longitude.',
    queryParams: {
      lat: 30.4015,
      long: -97.7525,
      hqMappingName: 'walkerrx',
      pharmacyCount: 5
    }
  },
  // Pet Medications Endpoints
  {
    id: 'petMedsFindDrug',
    name: 'Find Pet Medications by Name',
    endpoint: '/v1/petmeds/drugs/names',
    method: 'POST',
    description: 'Retrieves a list of pet medications that match a given prefix.',
    requestBody: {
      hqMappingName: 'walkerrx',
      prefixText: 'heart',
      count: 10
    }
  },
  {
    id: 'petMedsPricingByGsn',
    name: 'Get Pet Medications Pricing by GSN',
    endpoint: '/v1/petmeds/drugprices/byGSN',
    method: 'POST',
    description: 'Retrieves pet medication pricing based on the Generic Sequence Number (GSN).',
    requestBody: {
      hqMappingName: 'walkerrx',
      gsn: 62733,
      latitude: 30.4014,
      longitude: -97.7525,
      quantity: 30
    }
  },
  {
    id: 'petMedsPricingByName',
    name: 'Get Pet Medications Pricing by Name',
    endpoint: '/v1/petmeds/drugprices/byName',
    method: 'POST',
    description: 'Retrieves pet medication pricing based on the drug name.',
    requestBody: {
      hqMappingName: 'walkerrx',
      drugName: 'heartgard',
      latitude: 30.4015,
      longitude: -97.7527,
      quantity: 30
    }
  },
  {
    id: 'petMedsPricingByNdc',
    name: 'Get Pet Medications Pricing by NDC Code',
    endpoint: '/v1/petmeds/drugprices/byNdcCode',
    method: 'POST',
    description: 'Retrieves pet medication pricing using the National Drug Code (NDC).',
    requestBody: {
      hqMappingName: 'walkerrx',
      ndcCode: 70954014010,
      latitude: 30.4015,
      longitude: -97.7527,
      quantity: 30
    }
  }
];

export default function ApiTestPage() {
  const [activeEndpoint, setActiveEndpoint] = useState<string | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [response, setResponse] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  const [requestParams, setRequestParams] = useState<any>({});
  const [zipCode, setZipCode] = useState<string>('90210');
  const [latitude, setLatitude] = useState<number>(34.0736);
  const [longitude, setLongitude] = useState<number>(-118.4004);

  // Function to get coordinates from zip code
  const getCoordinatesFromZip = async (zip: string) => {
    try {
      // Use Google Maps Geocoding API to get coordinates from ZIP code
      const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;
      const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${zip}&key=${apiKey}`);
      const data = await response.json();
      
      if (data.status === 'OK' && data.results && data.results.length > 0) {
        const location = data.results[0].geometry.location;
        setLatitude(location.lat);
        setLongitude(location.lng);
        return { latitude: location.lat, longitude: location.lng };
      } else {
        console.error('Geocoding error:', data.status);
        return { latitude, longitude }; // Return current values if geocoding fails
      }
    } catch (error) {
      console.error('Error getting coordinates:', error);
      return { latitude, longitude }; // Return current values if geocoding fails
    }
  };

  // Function to get authentication token
  const getAuthToken = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/auth/token');
      
      if (!response.ok) {
        throw new Error(`Authentication failed: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      setToken(data.access_token);
      setResponse(data);
      return data.access_token;
    } catch (error) {
      setError(`Authentication error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      return null;
    } finally {
      setLoading(false);
    }
  };

  // Function to make API calls
  const makeApiCall = async (endpoint: any) => {
    if (!token && endpoint.id !== 'auth') {
      const newToken = await getAuthToken();
      if (!newToken) {
        setError('Authentication required. Please get a token first.');
        return;
      }
    }
    
    setLoading(true);
    setError(null);
    setResponse(null);
    
    try {
      let url = '';
      let options: RequestInit = {
        method: endpoint.method,
        headers: {
          'Content-Type': 'application/json'
        }
      };
      
      // Handle different endpoints
      if (endpoint.id === 'auth') {
        // Auth is handled separately
        await getAuthToken();
        return;
      } else {
        // For API endpoints
        url = `/api/proxy${endpoint.endpoint}`;
        
        // Replace path parameters
        if (endpoint.params) {
          endpoint.params.forEach((param: string) => {
            url = url.replace(`{${param}}`, requestParams[param] || '');
          });
        }
        
        // Add query parameters
        if (endpoint.queryParams) {
          const queryParams = new URLSearchParams();
          Object.entries(endpoint.queryParams).forEach(([key, value]) => {
            // Override with user-provided values if available
            const paramValue = requestParams[key] || value;
            
            // Use current latitude and longitude for location parameters
            if (key === 'lat') {
              queryParams.append(key, String(latitude));
            } else if (key === 'long') {
              queryParams.append(key, String(longitude));
            } else {
              queryParams.append(key, String(paramValue));
            }
          });
          url += `?${queryParams.toString()}`;
        }
        
        // Add request body for POST requests
        if (endpoint.method === 'POST') {
          let body: any = { ...endpoint.requestBody };
          
          // Always use current latitude and longitude from state
          if ('latitude' in body) {
            body.latitude = latitude;
          }
          
          if ('longitude' in body) {
            body.longitude = longitude;
          }
          
          // Handle multi-drug endpoints
          if (endpoint.id.includes('multiDrug') || endpoint.id === 'multigroupdrugprices') {
            // Create drugList array for multi-drug endpoints
            if (!body.drugList) {
              body.drugList = [];
            }
            
            // For demonstration, we'll add a single drug to the list based on user input
            if (requestParams.gsn && endpoint.id === 'multiDrugGsn') {
              body.drugList = [{
                gsn: parseInt(requestParams.gsn),
                quantity: requestParams.quantity ? parseInt(requestParams.quantity) : 30,
                brandGenericFlag: 'G',
                customizedQuantity: true
              }];
            } else if (requestParams.drugName && endpoint.id === 'multiDrugName') {
              body.drugList = [{
                drugName: requestParams.drugName,
                quantity: requestParams.quantity ? parseInt(requestParams.quantity) : 30,
                brandGenericFlag: 'G',
                customizedQuantity: true
              }];
            } else if (requestParams.ndcCode && endpoint.id === 'multiDrugNdc') {
              body.drugList = [{
                ndcCode: parseInt(requestParams.ndcCode),
                quantity: requestParams.quantity ? parseInt(requestParams.quantity) : 30,
                customizedQuantity: true
              }];
            }
          } else {
            // Update request body with user parameters for non-multi-drug endpoints
            Object.keys(requestParams).forEach(key => {
              if (requestParams[key]) {
                // Don't override latitude and longitude from user parameters
                if (key !== 'latitude' && key !== 'longitude') {
                  // Convert numeric values
                  if (['gsn', 'ndcCode', 'quantity', 'npi'].includes(key)) {
                    body[key] = parseInt(requestParams[key]);
                  } else if (['latitude', 'longitude'].includes(key)) {
                    body[key] = parseFloat(requestParams[key]);
                  } else {
                    body[key] = requestParams[key];
                  }
                }
              }
            });
          }
          
          options.body = JSON.stringify(body);
        }
        
        // Add authorization header
        if (token) {
          options.headers = {
            ...options.headers,
            'Authorization': `Bearer ${token}`
          };
        }
      }
      
      console.log(`Making API call to: ${url}`, options);
      
      // Display request details in the UI
      setResponse({
        _requestInfo: {
          url,
          method: options.method,
          headers: options.headers,
          body: options.body ? JSON.parse(options.body as string) : null
        },
        _status: 'loading'
      });
      
      const response = await fetch(url, options);
      
      if (!response.ok) {
        const errorText = await response.text();
        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch (e) {
          errorData = { rawError: errorText };
        }
        
        const errorMessage = `API call failed: ${response.status} ${response.statusText}${errorData ? ` - ${JSON.stringify(errorData)}` : ''}`;
        console.error(errorMessage);
        
        // Include request details in the error response
        setResponse({
          _requestInfo: {
            url,
            method: options.method,
            headers: options.headers,
            body: options.body ? JSON.parse(options.body as string) : null
          },
          _errorDetails: errorData,
          _status: 'error',
          _statusCode: response.status,
          _statusText: response.statusText
        });
        
        throw new Error(errorMessage);
      }
      
      const data = await response.json();
      
      // Include request details in the successful response
      setResponse({
        ...data,
        _requestInfo: {
          url,
          method: options.method,
          headers: options.headers,
          body: options.body ? JSON.parse(options.body as string) : null
        },
        _status: 'success',
        _statusCode: response.status
      });
    } catch (error) {
      console.error('API call error:', error);
      setError(error instanceof Error ? error.message : 'Unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  // Function to handle endpoint selection
  const handleEndpointSelect = (endpointId: string) => {
    setActiveEndpoint(endpointId);
    setRequestParams({});
    setResponse(null);
    setError(null);
  };

  // Function to handle parameter change
  const handleParamChange = (key: string, value: string) => {
    setRequestParams((prev: Record<string, any>) => ({
      ...prev,
      [key]: value
    }));
  };

  // Function to handle zip code change
  const handleZipCodeChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const newZipCode = e.target.value;
    setZipCode(newZipCode);
    
    // Only update coordinates if ZIP code is valid (5 digits)
    if (/^\d{5}$/.test(newZipCode)) {
      await getCoordinatesFromZip(newZipCode);
    }
  };
  
  // Function to handle latitude change
  const handleLatitudeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(e.target.value);
    if (!isNaN(value)) {
      setLatitude(value);
    }
  };
  
  // Function to handle longitude change
  const handleLongitudeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(e.target.value);
    if (!isNaN(value)) {
      setLongitude(value);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">API Testing Console</h1>
          <Link href="/" className="text-blue-600 hover:text-blue-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clipRule="evenodd" />
            </svg>
            Back to Home
          </Link>
        </div>
        
        {/* Authentication Status */}
        <div className="bg-white rounded-lg shadow-md p-4 mb-6">
          <div className="flex justify-between items-center">
            <h2 className="text-lg font-semibold text-gray-700">Authentication Status</h2>
            <button
              onClick={() => makeApiCall(API_ENDPOINTS.find(e => e.id === 'auth')!)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
              disabled={loading}
            >
              {loading && activeEndpoint === 'auth' ? 'Getting Token...' : token ? 'Refresh Token' : 'Get Token'}
            </button>
          </div>
          <div className="mt-2">
            {token ? (
              <div className="flex items-center text-green-600">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span>Authenticated</span>
              </div>
            ) : (
              <div className="flex items-center text-red-600">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
                <span>Not Authenticated</span>
              </div>
            )}
          </div>
        </div>
        
        {/* Location Settings */}
        <div className="bg-white rounded-lg shadow-md p-4 mb-6">
          <h2 className="text-lg font-semibold text-gray-700 mb-3">Location Settings</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label htmlFor="zipCode" className="block text-sm font-medium text-gray-700 mb-1">ZIP Code</label>
              <div className="flex">
                <input
                  type="text"
                  id="zipCode"
                  value={zipCode}
                  onChange={handleZipCodeChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter ZIP code"
                />
                <button
                  onClick={() => getCoordinatesFromZip(zipCode)}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-r-md transition-colors"
                >
                  Update
                </button>
              </div>
              <p className="text-xs text-gray-500 mt-1">Enter a 5-digit ZIP code to update coordinates</p>
            </div>
            <div>
              <label htmlFor="latitude" className="block text-sm font-medium text-gray-700 mb-1">Latitude</label>
              <input
                type="text"
                id="latitude"
                value={latitude}
                onChange={handleLatitudeChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label htmlFor="longitude" className="block text-sm font-medium text-gray-700 mb-1">Longitude</label>
              <input
                type="text"
                id="longitude"
                value={longitude}
                onChange={handleLongitudeChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="mt-3 text-sm text-gray-600">
            <p>All API requests that require location data will use these coordinates.</p>
          </div>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* API Endpoints List */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="bg-gray-100 px-4 py-3 border-b">
                <h2 className="font-semibold text-gray-700">API Endpoints</h2>
              </div>
              <div className="divide-y divide-gray-200 max-h-[600px] overflow-y-auto">
                {API_ENDPOINTS.map((endpoint) => (
                  <button
                    key={endpoint.id}
                    onClick={() => handleEndpointSelect(endpoint.id)}
                    className={`w-full text-left px-4 py-3 hover:bg-gray-50 transition-colors ${activeEndpoint === endpoint.id ? 'bg-blue-50 border-l-4 border-blue-500' : ''}`}
                  >
                    <div className="font-medium text-gray-800">{endpoint.name}</div>
                    <div className="text-sm text-gray-500 flex items-center mt-1">
                      <span className={`inline-block px-2 py-1 text-xs font-semibold rounded ${endpoint.method === 'GET' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}`}>
                        {endpoint.method}
                      </span>
                      <span className="ml-2 truncate">{endpoint.endpoint}</span>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          </div>
          
          {/* API Request and Response */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-md overflow-hidden">
              {activeEndpoint ? (
                <>
                  <div className="bg-gray-100 px-4 py-3 border-b">
                    <h2 className="font-semibold text-gray-700">
                      {API_ENDPOINTS.find(e => e.id === activeEndpoint)?.name}
                    </h2>
                    <p className="text-sm text-gray-600 mt-1">
                      {API_ENDPOINTS.find(e => e.id === activeEndpoint)?.description}
                    </p>
                  </div>
                  
                  <div className="p-4 border-b">
                    <h3 className="font-medium text-gray-700 mb-2">Request</h3>
                    
                    {/* Parameters for the selected endpoint */}
                    <div className="mb-4">
                      {activeEndpoint === 'drugInfo' && (
                        <div className="mb-3">
                          <label htmlFor="gsn" className="block text-sm font-medium text-gray-700 mb-1">GSN</label>
                          <input
                            type="text"
                            id="gsn"
                            value={requestParams.gsn || ''}
                            onChange={(e) => handleParamChange('gsn', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter GSN (e.g., 62733)"
                          />
                        </div>
                      )}
                      
                      {(activeEndpoint === 'findDrug' || activeEndpoint === 'findDrugPost') && (
                        <div className="mb-3">
                          <label htmlFor="prefixText" className="block text-sm font-medium text-gray-700 mb-1">Drug Name Prefix</label>
                          <input
                            type="text"
                            id="prefixText"
                            value={requestParams.prefixText || ''}
                            onChange={(e) => handleParamChange('prefixText', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter drug name prefix (e.g., LIP)"
                          />
                        </div>
                      )}
                      
                      {(activeEndpoint === 'pricingByName' || activeEndpoint === 'multiDrugName') && (
                        <div className="mb-3">
                          <label htmlFor="drugName" className="block text-sm font-medium text-gray-700 mb-1">Drug Name</label>
                          <input
                            type="text"
                            id="drugName"
                            value={requestParams.drugName || ''}
                            onChange={(e) => handleParamChange('drugName', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter drug name (e.g., lipitor)"
                          />
                        </div>
                      )}
                      
                      {(activeEndpoint === 'pricingByGsn' || activeEndpoint === 'groupPricing' || activeEndpoint === 'multiDrugGsn' || activeEndpoint === 'multigroupdrugprices') && (
                        <div className="mb-3">
                          <label htmlFor="gsn" className="block text-sm font-medium text-gray-700 mb-1">GSN</label>
                          <input
                            type="text"
                            id="gsn"
                            value={requestParams.gsn || ''}
                            onChange={(e) => handleParamChange('gsn', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter GSN (e.g., 62733)"
                          />
                        </div>
                      )}
                      
                      {(activeEndpoint === 'pricingByNdc' || activeEndpoint === 'multiDrugNdc') && (
                        <div className="mb-3">
                          <label htmlFor="ndcCode" className="block text-sm font-medium text-gray-700 mb-1">NDC Code</label>
                          <input
                            type="text"
                            id="ndcCode"
                            value={requestParams.ndcCode || ''}
                            onChange={(e) => handleParamChange('ndcCode', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter NDC Code (e.g., 70954014010)"
                          />
                        </div>
                      )}
                      
                      {(activeEndpoint === 'pricingByGsn' || activeEndpoint === 'pricingByNdc' || 
                        activeEndpoint === 'multiDrugGsn' || activeEndpoint === 'multiDrugName' || 
                        activeEndpoint === 'multiDrugNdc' || activeEndpoint === 'multigroupdrugprices') && (
                        <div className="mb-3">
                          <label htmlFor="quantity" className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                          <input
                            type="text"
                            id="quantity"
                            value={requestParams.quantity || ''}
                            onChange={(e) => handleParamChange('quantity', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter quantity (e.g., 30)"
                          />
                        </div>
                      )}

                      {/* Pet Medications Form Fields */}
                      {activeEndpoint === 'petMedsFindDrug' && (
                        <div className="mb-3">
                          <label htmlFor="prefixText" className="block text-sm font-medium text-gray-700 mb-1">Pet Medication Name Prefix</label>
                          <input
                            type="text"
                            id="prefixText"
                            value={requestParams.prefixText || ''}
                            onChange={(e) => handleParamChange('prefixText', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter pet medication name prefix (e.g., heart)"
                          />
                        </div>
                      )}
                      
                      {activeEndpoint === 'petMedsPricingByGsn' && (
                        <div className="mb-3">
                          <label htmlFor="gsn" className="block text-sm font-medium text-gray-700 mb-1">Pet Medication GSN</label>
                          <input
                            type="text"
                            id="gsn"
                            value={requestParams.gsn || ''}
                            onChange={(e) => handleParamChange('gsn', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter GSN (e.g., 62733)"
                          />
                        </div>
                      )}
                      
                      {activeEndpoint === 'petMedsPricingByName' && (
                        <div className="mb-3">
                          <label htmlFor="drugName" className="block text-sm font-medium text-gray-700 mb-1">Pet Medication Name</label>
                          <input
                            type="text"
                            id="drugName"
                            value={requestParams.drugName || ''}
                            onChange={(e) => handleParamChange('drugName', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter pet medication name (e.g., heartgard)"
                          />
                        </div>
                      )}
                      
                      {activeEndpoint === 'petMedsPricingByNdc' && (
                        <div className="mb-3">
                          <label htmlFor="ndcCode" className="block text-sm font-medium text-gray-700 mb-1">Pet Medication NDC Code</label>
                          <input
                            type="text"
                            id="ndcCode"
                            value={requestParams.ndcCode || ''}
                            onChange={(e) => handleParamChange('ndcCode', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter NDC Code (e.g., 70954014010)"
                          />
                        </div>
                      )}
                      
                      {(activeEndpoint === 'petMedsPricingByGsn' || activeEndpoint === 'petMedsPricingByName' || activeEndpoint === 'petMedsPricingByNdc') && (
                        <div className="mb-3">
                          <label htmlFor="quantity" className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                          <input
                            type="text"
                            id="quantity"
                            value={requestParams.quantity || ''}
                            onChange={(e) => handleParamChange('quantity', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter quantity (e.g., 30)"
                          />
                        </div>
                      )}

                      {/* Common field for all endpoints that use hqMappingName */}
                      {activeEndpoint !== 'auth' && activeEndpoint !== 'drugInfo' && (
                        <div className="mb-3">
                          <label htmlFor="hqMappingName" className="block text-sm font-medium text-gray-700 mb-1">HQ Mapping Name</label>
                          <input
                            type="text"
                            id="hqMappingName"
                            value={requestParams.hqMappingName || 'walkerrx'}
                            onChange={(e) => handleParamChange('hqMappingName', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Enter HQ Mapping Name (e.g., walkerrx)"
                          />
                        </div>
                      )}
                    </div>
                    
                    <button
                      onClick={() => makeApiCall(API_ENDPOINTS.find(e => e.id === activeEndpoint)!)}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
                      disabled={loading || (!token && activeEndpoint !== 'auth')}
                    >
                      {loading ? 'Loading...' : 'Send Request'}
                    </button>
                  </div>
                  
                  {/* Error display */}
                  {error && (
                    <div className="p-4 bg-red-50 border-b border-red-100">
                      <div className="flex">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div className="ml-3">
                          <h3 className="text-sm font-medium text-red-800">Error</h3>
                          <div className="mt-2 text-sm text-red-700">
                            <p>{error}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Response display */}
                  {response && (
                    <div className="p-4">
                      <h3 className="font-medium text-gray-700 mb-2">Response</h3>
                      
                      {/* Request Information */}
                      <div className="mb-4">
                        <h4 className="text-sm font-medium text-gray-600 mb-1">Request Details</h4>
                        <div className="bg-gray-50 p-3 rounded-md border border-gray-200">
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div>
                              <span className="font-medium">URL:</span> {response._requestInfo?.url}
                            </div>
                            <div>
                              <span className="font-medium">Method:</span> {response._requestInfo?.method}
                            </div>
                          </div>
                          {response._requestInfo?.body && (
                            <div className="mt-2">
                              <span className="font-medium">Request Body:</span>
                              <pre className="mt-1 bg-gray-100 p-2 rounded-md text-xs overflow-auto max-h-32">
                                {JSON.stringify(response._requestInfo.body, null, 2)}
                              </pre>
                            </div>
                          )}
                        </div>
                      </div>
                      
                      {/* Status Information */}
                      {response._status && (
                        <div className="mb-4">
                          <h4 className="text-sm font-medium text-gray-600 mb-1">Status</h4>
                          <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            response._status === 'success' 
                              ? 'bg-green-100 text-green-800' 
                              : response._status === 'loading'
                                ? 'bg-blue-100 text-blue-800'
                                : 'bg-red-100 text-red-800'
                          }`}>
                            {response._status === 'success' && (
                              <svg className="mr-1.5 h-2 w-2 text-green-400" fill="currentColor" viewBox="0 0 8 8">
                                <circle cx="4" cy="4" r="3" />
                              </svg>
                            )}
                            {response._status === 'error' && (
                              <svg className="mr-1.5 h-2 w-2 text-red-400" fill="currentColor" viewBox="0 0 8 8">
                                <circle cx="4" cy="4" r="3" />
                              </svg>
                            )}
                            {response._status === 'loading' && (
                              <svg className="mr-1.5 h-2 w-2 text-blue-400" fill="currentColor" viewBox="0 0 8 8">
                                <circle cx="4" cy="4" r="3" />
                              </svg>
                            )}
                            {response._status.charAt(0).toUpperCase() + response._status.slice(1)}
                            {response._statusCode && ` (${response._statusCode})`}
                          </div>
                        </div>
                      )}
                      
                      {/* Error Details */}
                      {response._status === 'error' && response._errorDetails && (
                        <div className="mb-4">
                          <h4 className="text-sm font-medium text-red-600 mb-1">Error Details</h4>
                          <pre className="bg-red-50 p-3 rounded-md border border-red-200 text-sm text-red-700 overflow-auto max-h-64">
                            {JSON.stringify(response._errorDetails, null, 2)}
                          </pre>
                        </div>
                      )}
                      
                      {/* Response Data */}
                      <div>
                        <h4 className="text-sm font-medium text-gray-600 mb-1">Response Data</h4>
                        
                        {/* Location information used in the request */}
                        {(response._requestInfo?.body && (response._requestInfo.body.latitude || response._requestInfo.body.longitude)) || 
                         (response._requestInfo?.url && response._requestInfo.url.includes('lat=') && response._requestInfo.url.includes('long=')) ? (
                          <div className="mb-3 p-2 bg-blue-50 border border-blue-100 rounded-md">
                            <p className="text-xs text-blue-700">
                              <span className="font-medium">Location used in this request:</span> {' '}
                              {response._requestInfo?.body && (response._requestInfo.body.latitude || response._requestInfo.body.longitude) ? (
                                <>
                                  Latitude: {response._requestInfo.body.latitude}, Longitude: {response._requestInfo.body.longitude}
                                </>
                              ) : (
                                <>
                                  Latitude: {latitude}, Longitude: {longitude}
                                </>
                              )}
                              {zipCode && <span> (ZIP: {zipCode})</span>}
                            </p>
                          </div>
                        ) : null}
                        
                        <pre className="bg-gray-50 p-4 rounded-md overflow-auto max-h-96 text-sm">
                          {JSON.stringify(
                            // Filter out the metadata fields we added
                            Object.fromEntries(
                              Object.entries(response).filter(([key]) => !key.startsWith('_'))
                            ), 
                            null, 
                            2
                          )}
                        </pre>
                      </div>
                    </div>
                  )}
                </>
              ) : (
                <div className="p-8 text-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <h3 className="mt-4 text-lg font-medium text-gray-900">Select an API Endpoint</h3>
                  <p className="mt-1 text-gray-500">Choose an endpoint from the list to test the API.</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 